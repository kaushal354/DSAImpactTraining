#Recursion:-
Recursion is nothing but function calling itself again and again till it meets
1. function calling same function itself
2. function calling another function itself.


In java we don't have pointer so we can't use reference java is strictly pass by value not call by reference.
if we did't mention base case properly we get an exception call stack overflow.
5! = 5*4!
4! = 4*3!
3! = 3*2!
2! = 2*1!

recursion are used to break the code

--
  |
  |  #stack
  |
  |
  |
   _______

#write the code for factorial using recursion?

#draw the tree by factorial 5!.
->all the returned value will be pushed into a stack.
->whenever we need base condition the element will be pop.


psudo code:

fact(n){
if(n==0){
return 1;
}
else{
return n*fact(n-1);
}
}


#actuall code:-

import java.util.*;
public class fact{
public int add(int a) {
        if(n==0){
return 1;
}
else{
return n*fact(n-1);
}
}
    }

}

public static void main(String[] args) {
        Calculator factorial = new fact();
        int fact1 = factorial.add(5); // Calling instance method

        System.out.println("fact: " + sum);
    }
}

https://leetcode.com/problems/lemonade-change/description/
solve this

#fibonacci
class Main{
public static void main(String[] args){
if (i == 0 or i == 1){
return i
}
else{
System.out.println(n + fibo(n-1));
}
}









Assign cookies using java:-
class Main{
public static void main(String[] args){
int l = 0;
int[] g = {1,2,3};
int[] s = {1,1};
Array.sort(g);
Array.sort(s);
for(int csize :s){
if(csize >=g[l]){
l++;
}
if l == g.length{
break
}
}
return l;
}
}
}
}


#lemonade 
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static boolean lemonadeChange(List<Integer> bills) {
        int five = 0; 
        int ten = 0;   
        
        for(int i = 0; i < bills.size(); i++){
            if(bills[i] == 5){
                five++;  
            }
            else if(bills[i] == 10){
                if(five > 0){
                    five--; 
                    ten++;   
                }
                else{
                   return false;   
                } 
            }
            else if(bills[i] == 20) {
                if(five > 0 && ten > 0){
                    five--; 
                    ten--;   
                }
                else if (five >= 3){
                    five -= 3;  
                }
                else{
                  return false;  
                }   
	else{
if(five==5 ){

}
}
            }

        }
        return true;  
    }

}



#reverse the array using the two pointer

[1,3,2,4,6,5] --> [5,6,4,2,3,1]
arr = [1, 3,2,4,6,5]

i =0
j=len(arr)-1
while i<j:
	arr[i],arr[j]= arr[j],arr[i]
	j-=1
	i+=1

print(arr)



in java we have a charat method 

09. palindrome check no

55.55. Jump Game


