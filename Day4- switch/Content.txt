#switch case

print days
1--> Monday
2--> Tuesday
7--> Sunday

class Days{
public static void main(String []args){
int day;
if(num ==1){
System.out.println("Monday");
}elseif(num == 2){
System.out.println("Tuesday");
}
else if(num == 3){
System.out.println("Wednesday");
}
else if(num == 4){
System.out.println("Thursday");
}
else if(num == 5){
System.out.println("Friday");
}
elseif(num == 6){
System.out.println("Saturday");
}
else{
System.out.println("Sunday"):
}
}
}

To reduce the messiness in code
import java.util.*;
class Days{
public static void main(String []args){
Scanner sc = new Scanner(System.in);
int day = sc.nextInt();
Switch(day){
case 1:
System.out.println("Monday");
break;
case 2:
System.out.println("Tuesday");
break;
case 3:
System.out.println("Wednesday");
break;
case 4:
System.out.println("Thursday");
break;
case 5:
System.out.println("Friday");
break;
case 6:
System.out.println("Saturday");
break;
default:
System.out.println("Sunday");
}
}
}


Note:
- cases have to be the same type as expressions, must be a constant or literal
- duplicate case values are not allowed
- break is use to terminate the sequence
- if break is not used, it will continue to next case
- default will execute when none of the above does
- if default is not at the end, put break after it

class Main{
public static void main(String[] args){
switch(expression){
case:
statement;
break;
default:
statement;
}
}
}


#Enhanced Switch case

import java.util.*;
class Days{
public static void main(String []args){
Scanner sc = new Scanner(System.in);
int day = sc.nextInt();
Switch(day){
case 1 -> System.out.println("Monday");
case 2-> System.out.println("Tuesday");
case 3->System.out.println("Wednesday");
case 4->System.out.println("Thursday");
case 5->System.out.println("Friday");
case 6->System.out.println("Saturday");
default->System.out.println("Sunday");
}
}
}


Syntax:
switch(expression){
case()->statement;
default->statement;
}


#Write a program to check till the no get in single digit
sample input ->0
Sample output->8
7+8+9+4+5+6+2+3

class Single{
public static void main(String[] args){
int n = 123;
while(n>9){
int sum = 0;
while(n!=0){
int rem = n%10;
sum = sum + rem;
n = n/10
}
n = sum;
}
System.out.println(n);
}
}


#print right angle triangle then invert
input = 5
output:
****
***
**
*

class Main{
public static void main(String[] args){
for(int i=5;i<=5;i--){
for(intj=1;j<=i;j++){
System.out.println("*);
}
System.out.println();
}
}
}


#
1
123     
12345
1234567
123456789

class Main {
public static void main(String[] args) {
for (int i = 1; i <= 5; i++) {
for (int j = 1; j <= 2*i-1; j++) {
System.out.print(j);
 }
System.out.println();
        }
    }
}


#ternary operator

class Main {
public static void main(String[] args) {
int n=5;
if(n==5){
System.out.println("Yes");
        }else{
System.out.println("No");
    }
}

to short it we are using ternary operator
(condition)? statement1:statement2; --> syntax
example:-
String res = (n==5) ? "Yes" : "No";
System.out.println(res);

#print hello square using ternary operator
class Main(
public static void main(String[] args){
String res = (n==5) ? "Yes" : "No";
System.out.println(res);
}
}

*****
*   *
*   *
*   *
*****

#Array
class Main{
public static void main(String[] args){
int[] arr = {1,2,3,4,5};
for(int i = 0;i<arr.length;i++){
System.out.println(arr[i]);
}
for(int i :arr){    // for each loop
System.out.println(i);
}
}

//for each loop:
whenever we don't have length and whenever we don't have index value you have to use for each loop.
mostly we use for each loop in collection.
example :- list set and map

for(int i :arr){    // for each loop
System.out.println(i);
}
}

class Main{
public static void main(String[] args){
int num = 10;
int sum = 0;
for(int i:num){
sum = i + sum;
}
return sum
}
}

#
     *
    ***
   *****
  *******
 *********

public class Main {
public static void main(String[] args) {
int n = 5;
for (int i = 1; i <= n; i++) {
for (int j = i; j < n; j++) {
System.out.print(" ");
}
for (int k = 1; k <= (2 * i - 1); k++) {
System.out.print("*");
}
System.out.println();
}
}
}

#
  *
 ***
*****
 ***
  *

public class Main {
public static void main(String[] args) {
int n = 5;
for (int i = 1; i <= n; i++) {
for (int j = i; j < n; j++) {
System.out.print(" ");
}
for (int k = 1; k <= (2 * i - 1); k++) {
System.out.print("*");
}
System.out.println();
}
for (int i = n - 1; i >= 1; i--) {
for (int j = n; j > i; j--) {
System.out.print(" ");
}
for (int k = 1; k <= (2 * i - 1); k++) {
System.out.print("*");
}
System.out.println();
}
}
}

#
hourglass
*********
 *     * 
  *   *
   * *
    *
   * *
  *   *
 *     *
*********


#Butterfly
*     *
**   **
* * * *
**   **
*     *


*   *
** **
*****
** **
*   *


*
**
***
***
**
*

  *
 **
***
***
 **
  *


question:-
In the kingdom of Terebinthia, Leslie Burke is so much interested in gardening and hence she plants more trees in her garden. She plants trees in a rectangular fashion with the order of rows and columns and numbers the trees in a row-wise order. She planted the mango trees only in the 1st row, 1st column, and last column. So, given the tree number, your task is to find out whether the given tree is a mango tree or not. Now, write a program to check whether the given number denotes a mango tree or not.
Input Format
Input consists of 3 integers. The first input denotes the number of rows. The second input denotes the number of columns. The third input denotes the tree number.
Constraints
NA
Output Format
If the given number is a mango tree, print "Yes". Otherwise, print "No"
Sample Input 0
5
5
11
Sample Output 0
Yes
Sample Input 1
2
5
8
Sample Output 1
No

class Main{
public static void main(String[] args){
Scanner sc = new Scanner(System.in);
int n = sc.nextInt();
int val = sc.nextInt();
if(val<=n || val %n == 1 || val%n == 0){
System.out.println("Yes");
}else{
System.out.println("No");
}
}
}






